<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="EnvDTE.dll" #>
<#@ assembly name="System.IO" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Text.Encoding" #>
<#@ assembly name="System.Threading.Tasks" #>
<#@ assembly name="Microsoft.CodeAnalysis" #>
<#@ assembly name="Microsoft.CodeAnalysis.CSharp" #>
<#@ assembly name="Microsoft.CodeAnalysis.CSharp.Workspaces" #>
<#@ assembly name="Microsoft.CodeAnalysis.Workspaces.Desktop" #>
<#@ assembly name="Microsoft.CodeAnalysis.Workspaces" #>
<#@ assembly name="System.Runtime" #>
<#@ import namespace="Microsoft.CodeAnalysis" #>
<#@ import namespace="Microsoft.CodeAnalysis.CSharp" #>
<#@ import namespace="Microsoft.CodeAnalysis.CSharp.Syntax" #>
<#@ import namespace="Microsoft.CodeAnalysis.Emit" #>
<#@ import namespace="Microsoft.CodeAnalysis.MSBuild" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Xml;
using System.Web;

namespace BGC.Core
{
    public partial class SettingsFactory
    {
        private static readonly IReadOnlyDictionary<Type, Func<string, Setting>> SettingsMap = new Dictionary<Type, Func<string, Setting>>()
        {
<#
    EnvDTE.DTE dte = (this.Host as IServiceProvider).GetService(typeof(EnvDTE.DTE)) as EnvDTE.DTE;
    DirectoryInfo projectDir = new DirectoryInfo(Path.GetDirectoryName(dte.Solution.FullName) + "\\BGC.Core");

    List<ClassDeclarationSyntax> declaredClasses = new List<ClassDeclarationSyntax>();
    var classes = from file in projectDir.GetFiles("*.cs", SearchOption.AllDirectories)
                  where file.Name.EndsWith("Setting.cs") // this is a performance optimization
                  let parsedTree = CSharpSyntaxTree.ParseText(File.ReadAllText(file.FullName))
                  select GetSyntaxNodesOfType<ClassDeclarationSyntax>(parsedTree.GetRoot());
    
    declaredClasses.AddRange(classes.SelectMany(x => x));
    foreach (var root in declaredClasses)
    {
        if (root.BaseList == null) continue;

        GenericNameSyntax iparamDeclaration = (from baseType in root.BaseList.Types
                                               let declaration = baseType.Type as GenericNameSyntax
                                               where (baseType.Type is GenericNameSyntax) &&
                                                     (baseType.Type as GenericNameSyntax).Identifier.Text == "IParameter"
                                               select baseType.Type as GenericNameSyntax).FirstOrDefault();
        if (iparamDeclaration != null)
        {
            TypeSyntax typeArg = iparamDeclaration.TypeArgumentList.Arguments.Single();
            string typeName;
            if (typeArg is GenericNameSyntax)
            {
                typeName = (typeArg as GenericNameSyntax).Identifier.ValueText + ResolveGenericTypeParamsRecursively((typeArg as GenericNameSyntax).TypeArgumentList);
            }
            else if (typeArg is IdentifierNameSyntax)
            {
                typeName = (typeArg as IdentifierNameSyntax).Identifier.ValueText;
            }
            else if (typeArg is PredefinedTypeSyntax)
            {
                typeName = (typeArg as PredefinedTypeSyntax).Keyword.Text;
            }
            else
            {
                throw new InvalidOperationException("Encountered unsupported syntax.");
            }
            ClassDeclarationSyntax declaringSettingType = GetSyntaxNodeParentOfType<ClassDeclarationSyntax>(iparamDeclaration);
            string settingType = declaringSettingType.Identifier.ValueText;
            #> { typeof(<#= typeName #>), (string name) => new <#= settingType #>(name) },
<#
        }
    }
#>
        };
    }
}

<#+
    private string ResolveGenericTypeParamsRecursively(TypeArgumentListSyntax typeArgs)
    {
        StringBuilder result = new StringBuilder();
        result.Append("<");
        foreach (TypeSyntax typeArg in typeArgs.Arguments)
        {
            if (typeArg is IdentifierNameSyntax)
            {
                result.Append((typeArg as IdentifierNameSyntax).Identifier.ValueText);
            }
            else if (typeArg is GenericNameSyntax)
            {
                result.Append((typeArg as GenericNameSyntax).Identifier.ValueText);
                result.Append(ResolveGenericTypeParamsRecursively((typeArg as GenericNameSyntax).TypeArgumentList));
            }
            else if (typeArg is PredefinedTypeSyntax)
            {
                result.Append((typeArg as PredefinedTypeSyntax).Keyword.Text);
            }
            else
            {
                throw new InvalidOperationException("Unsupported generic type argument syntax encountered.");
            }
        }
        result.Append(">");

        return result.ToString();
    }

    private T GetSyntaxNodeParentOfType<T>(SyntaxNode leaf) where T : SyntaxNode
    {
        SyntaxNode parent = leaf.Parent;
        while (parent != null && !(parent is T))
        {
            parent = parent.Parent;
        }

        return parent as T;
    }

    private IEnumerable<T> GetSyntaxNodesOfType<T>(SyntaxNode root) where T : SyntaxNode
    {
        List<T> result = new List<T>();
        Queue<SyntaxNode> searchQueue = new Queue<SyntaxNode>();
        searchQueue.Enqueue(root);
        while (searchQueue.Any())
        {
            SyntaxNode current = searchQueue.Dequeue();
            if (current is T)
            {
                result.Add(current as T);
            }

            foreach (SyntaxNode node in current.ChildNodes())
            {
                searchQueue.Enqueue(node);
            }
        }

        return result;
    }
 #>