<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ assembly name="$(TargetPath)" #>
<#@ import namespace="BGC.WebAPI.Models" #>
<#@ output extension=".cs" #>
using BGC.WebAPI.Models;

<# WriteClassDataRecursively(typeof(LocalizationDictionary)); #>
<#+
	static readonly string Indent = "    ";
	string ToSentenceCase(string s)
	{
		string result = char.ToUpper(s[0]) + s.Substring(1);
		return result;
	}

	void WriteClassDataRecursively(Type declaringType)
	{
		this.Write("public partial class {0}\r\n{{\r\n", declaringType.Name);
		this.PushIndent(Indent);
		IEnumerable<FieldInfo> keyNameFields = declaringType.GetFields(BindingFlags.NonPublic | BindingFlags.Static).Where(fi => fi.FieldType == typeof(string));
		foreach (FieldInfo field in keyNameFields)
		{
			this.Write("public LocalizedString {0} {{ get; private set; }}\r\n", this.ToSentenceCase(field.Name));
		}

		foreach (Type nestedType in declaringType.GetNestedTypes())
		{
			this.Write("public {0} {1} {{ get; private set; }}\r\n", nestedType.Name, nestedType.Name.Substring(0, nestedType.Name.Length - "Localization".Length));
		}

		foreach (Type nestedType in declaringType.GetNestedTypes())
		{
			WriteClassDataRecursively(nestedType);
		}
		this.PopIndent();
		this.Write("}\r\n");
	}
#>