<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="EnvDTE.dll" #>
<#@ assembly name="System.IO" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Text.Encoding" #>
<#@ assembly name="System.Threading.Tasks" #>
<#@ assembly name="Microsoft.CodeAnalysis" #>
<#@ assembly name="Microsoft.CodeAnalysis.CSharp" #>
<#@ assembly name="Microsoft.CodeAnalysis.CSharp.Workspaces" #>
<#@ assembly name="Microsoft.CodeAnalysis.Workspaces.Desktop" #>
<#@ assembly name="Microsoft.CodeAnalysis.Workspaces" #>
<#@ assembly name="System.Runtime" #>
<#@ import namespace="Microsoft.CodeAnalysis" #>
<#@ import namespace="Microsoft.CodeAnalysis.CSharp.Syntax" #>
<#@ import namespace="Microsoft.CodeAnalysis.Emit" #>
<#@ import namespace="Microsoft.CodeAnalysis.MSBuild" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    EnvDTE.DTE dte = (this.Host as IServiceProvider).GetService(typeof(EnvDTE.DTE)) as EnvDTE.DTE;
    string solutionPath = Path.GetDirectoryName(dte.Solution.FullName);
    MSBuildWorkspace msWorkspace = MSBuildWorkspace.Create();

    Solution solution = msWorkspace.OpenSolutionAsync(dte.Solution.FullName).Result;
    Project coreProject = solution.Projects.First(p => p.Name == "BGC.Core");
    Compilation compiledProject = coreProject.GetCompilationAsync().Result;
	IEnumerable<INamedTypeSymbol> permissionTypes = compiledProject.SyntaxTrees
        .Select(tree => GetSyntaxNodeOfType<ClassDeclarationSyntax>(tree.GetRoot()))
        .Where(classDeclaration => classDeclaration != null && !classDeclaration.Modifiers.Any(modifier => modifier.ToString() == "abstract"))
        .Select(_class =>
        {
            string _namespace = GetNamespace(_class).Name.GetText().ToString().Trim();
            string className = _class.Identifier.Text;
            return compiledProject.Assembly.GetTypeByMetadataName(_namespace + "." + className);
        })
        .Where(type => type != null && GetBaseTypes(type).FirstOrDefault(t => t.ToString() == "BGC.Core.Permission") != null);
#>using System.CodeDom.Compiler;
using BGC.Web.Areas.Administration.ViewModels.Permissions;
using BGC.Web.Areas.Administration.Controllers;
using BGC.Utilities;

namespace BGC.Web.Areas.Administration.ViewModels.Permissions
{
<#
    foreach (INamedTypeSymbol permission in permissionTypes)
    {
        string viewModelName = permission.ToString() + "ViewModel";
        viewModelName = viewModelName.Substring(viewModelName.LastIndexOf('.') + 1);
        #>
    [GeneratedCode("PermissionsViewModelGen.tt", "1.0.0.0")]
    [MappableWith(typeof(<#= permission.ToString() #>))]
    [DiscoverableBy(typeof(AccountController))]
    public partial class <#= viewModelName #> : PermissionViewModelBase
    {
    }
<#
    }
#>
}
<#+
    T GetSyntaxNodeOfType<T>(SyntaxNode root) where T : SyntaxNode
    {
        Queue<SyntaxNode> searchQueue = new Queue<SyntaxNode>();
        searchQueue.Enqueue(root);
        while (searchQueue.Any())
        {
            SyntaxNode current = searchQueue.Dequeue();
            if (current is T)
            {
                return current as T;
            }

            foreach (SyntaxNode node in current.ChildNodes())
            {
                searchQueue.Enqueue(node);
            }
        }

        return default(T);
    }

    NamespaceDeclarationSyntax GetNamespace(TypeDeclarationSyntax node)
    {
        SyntaxNode parent = node.Parent;
        while (!(parent is NamespaceDeclarationSyntax))
        {
            parent = parent.Parent;
        }
        return parent as NamespaceDeclarationSyntax;
    }

    ICollection<INamedTypeSymbol> GetBaseTypes(INamedTypeSymbol type)
    {
        INamedTypeSymbol baseClass = type.BaseType;
        HashSet<INamedTypeSymbol> result = new HashSet<INamedTypeSymbol>();
        while (baseClass != null)
        {
            result.Add(baseClass);
            baseClass = baseClass.BaseType;
        }

        return result;
    }
#>